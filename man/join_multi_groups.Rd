% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/harp_df_list.R
\name{join_multi_groups}
\alias{join_multi_groups}
\title{Join multiple groups to a point forecast data frame or \code{harp_list}}
\usage{
join_multi_groups(
  .fcst,
  group_df = getExportedValue("harpCore", "station_groups"),
  group_col = "station_group"
)
}
\arguments{
\item{.fcst}{A data frame or a \verb{<harp_list>}}

\item{group_df}{a data frame with a column that is common to \code{.fcst} that
uniquely identifies a row, and a column for the group name.}

\item{group_col}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> The name of the
column in \code{group_df} that contains the name of the station group.}
}
\value{
An object of the same class as \code{.fcst} with a multi-group column.
}
\description{
\code{join_multi_groups} adds a column to a \code{harp_det_point_df} or a
\code{harp_ens_point_df} data frame to where each row can be in mulitple groups.
This column can then be used as a grouping column in verification
functions. By default, the built in station group data \code{station_groups} is
used, but any data frame with a common column with the forecast data that
uniquely identifies a row can be used. An attribute is added so that the
verification functions know to treat this column as a multi-group column. All
rows in the output acquire an "All" value, meaning that rows that aren't
included in the grouping data frame are given the value "All" in the output.
}
\examples{
join_multi_groups(det_point_df)

# Note that each grouping is enclosed in < >
#
# Use custom groups
grps <- data.frame(
  SID = c(1001, 1001, 1002, 1002, 1002),
  letter = c("A", "B", "A", "C", "D")
)
join_multi_groups(det_point_df, grps, letter)

# Where a station is not in a group it gets the value "All" (note also the
# use of tidy selection)
ll <- "letter"
grps <- data.frame(
  SID = 1002,
  letter = "A"
)
join_multi_groups(det_point_df, grps, {{ll}})
}
